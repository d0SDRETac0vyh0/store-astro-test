---
// src/pages/admin/products/[...slug].astro
import ProductImage from "@/components/products/ProductImage.astro";
import ProductSlideshow from "@/components/products/ProductSlideshow.astro";
import MainLayout from "@/layouts/MainLayout.astro";
import { actions } from "astro:actions";

const { slug } = Astro.params;

const { data, error } = await actions.getProductsBySlug.safe(slug ?? "");

if (error) {
  return Astro.redirect("/404");
}

const { product, images } = data;
---

<MainLayout title="Mantenimiento de producto">
  <main class="container m-auto max-w-4xl px-5 mt-8">
  <h1 class="text-[#231f20]">{product.title}</h1>
  <a href="javascript:history.back()" class="text-blue-500">← Volver</a>

  <form class="grid grid-cols-1 sm:grid-cols-2 gap-4">
    <input type="hidden" name="id" value={product.id} />

    <!-- Datos generales -->
    <div class="mt-2">
      <h2 class="text-lg font-semibold text-[#231f20]">Datos generales</h2>

      <!-- Titulo -->
      <div class="mb-4">
        <label for="title" class="block text-[#231f20]">Título</label>
        <input
          type="text"
          id="title"
          name="title"
          value={product.title}
          class="w-full p-2 border border-gray-300 rounded"
          maxlength="50"
        />
      </div>

      <!-- Slug -->
      <div class="mb-4">
        <label for="slug" class="block text-[#231f20]">Slug</label>
        <input
          type="text"
          id="slug"
          name="slug"
          value={product.slug}
          class="w-full p-2 border border-gray-300 rounded"
        />
      </div>

      <!-- Descripción -->
      <div class="mb-4">
        <label for="description" class="block text-[#231f20]">Descripción</label
        >
        <textarea
          id="description"
          name="description"
          class="w-full p-2 border border-gray-300 rounded"
          rows="8">{product.description}</textarea
        >
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 gap-5">
        <!-- Precio -->
        <div class="mb-4">
          <label for="price" class="block text-[#231f20]">Precio</label>
          <input
            type="number"
            id="price"
            name="price"
            value={product.price}
            class="w-full p-2 border border-gray-300 rounded"
          />
        </div>

        <!-- Inventario -->
        <div class="mb-4">
          <label for="stock" class="block text-[#231f20]">Inventario</label>
          <input
            type="number"
            id="stock"
            name="stock"
            value={product.stock}
            class="w-full p-2 border border-gray-300 rounded"
          />
        </div>
      </div>

      <!-- Labels -->
      <div class="mb-4">
        <label for="tags" class="block text-[#231f20]"
          >Etiquetas <small class="text-gray-500">(Separado por comas)</small
          ></label
        >
        <input
          type="text"
          id="tags"
          name="tags"
          value={product.tags}
          class="w-full p-2 border border-gray-300 rounded"
        />
      </div>

      <div class="grid grid-cols-2 gap-4">
        <!-- Gender -->
        <div class="mb-4">
          <label for="gender" class="block text-[#231f20]">Sexo</label>
          <select
            class="w-full p-2 border border-gray-300 rounded"
            name="gender"
          >
            <option value="">[ Seleccione ]</option>
            {
              ["men", "women", "unisex", "kid"].map((gender) => (
                <option
                  value={gender}
                  class="capitalize"
                  selected={gender === product.gender}
                >
                  {gender.toUpperCase()}
                </option>
              ))
            }
          </select>
        </div>

        <!-- Type -->
        <div class="mb-4">
          <label for="tags" class="block text-[#231f20]">Tipo</label>
          <select class="w-full p-2 border border-gray-300 rounded" name="type">
            <option value="">[ Seleccione ]</option>
            {
              [
                "shirts",
                "pants",
                "hoodies",
                "hats",
                "beatles",
                "chaquetas",
                "vestidos",
                "pantys",
                "bufandas",
                "sweater",
                "top",
                "poleras",
                "blusas",
                "shorts",
                "faldas",
                "calzas",
                "pantalones",
                "jeans",
                "enteritos",
              ].map((type) => (
                <option
                  value={type}
                  class="capitalize"
                  selected={type === product.type}
                >
                  {type.toUpperCase()}
                </option>
              ))
            }
          </select>
        </div>
      </div>

      <!-- Tallas -->
      <div class="mb-4">
        <label for="sizes" class="block text-[#231f20] font-medium mb-2">Tallas</label>
        <div class="flex flex-wrap gap-3">
          {
            ["XS", "S", "M", "L", "XL", "XXL"].map((size) => (
              <button
                type="button"
                class="btn-size py-2 px-4 rounded-lg border border-gray-300 text-[#6d686e] hover:text-white hover:bg-[#231f20] transition-all duration-200 ease-in-out"
                onclick="this.classList.toggle('active')"
                class:list={
                  product.sizes.split(",").includes(size) ? "active" : ""
                }
              >
                {size}
              </button>
            ))
          }
        </div>
      </div>
      <!-- Categoria -->
      <div class="mb-4">
        <label for="categorys" class="block text-[#231f20]">Categoria</label>
        <div class="flex text-[#6d686e]">
          {
            ["Otoño/Invierno", "Primavera/Verano"].map((category) => (
              <button
                type="button"
                class="btn-category"
                onclick="this.classList.toggle('active')"
                class:list={
                  product.categorys.split(",").includes(category)
                    ? "active"
                    : ""
                }
              >
                {category}
              </button>
            ))
          }
        </div>
      </div>
<!-- Colores -->
<div class="mb-4">
  <label for="colors" class="block text-[#231f20]">Colores</label>
  <!-- Usamos flex-wrap para que los colores se ajusten automáticamente -->
  <div class="flex flex-wrap gap-4">
    {
      Object.entries({
        "Rojo": "#FF0000",
        "Azul": "#0000FF",
        "Negro": "#000000",
        "Blanco": "#FFFFFF",
        "Verde": "#008000",
        "Amarillo": "#FFFF00",
        "Rosa": "#FFC0CB",
        "Púrpura": "#800080",
        "Gris": "#808080",
        "Naranja": "#FFA500",
        "Gris claro": "#D3D3D3",
        "Gris oscuro": "#A9A9A9",
        "Carbón": "#36454F",
        "Azul marino": "#000080",
        "Azul medianoche": "#191970",
        "Azul claro": "#ADD8E6",
        "Denim": "#4682B4",
        "Azul cielo": "#87CEEB",
        "Azul bebé": "#BFEFFF",
        "Turquesa": "#40E0D0",
        "Verde azulado": "#008080",
        "Verde esmeralda": "#50C878",
        "Verde bosque": "#228B22",
        "Verde oliva": "#808000",
        "Verde militar": "#556B2F",
        "Caqui": "#C3B091",
        "Canela": "#D2691E",
        "Beige": "#F5F5DC",
        "Camel": "#C19A6B",
        "Marrón": "#8B4513",
        "Chocolate": "#7B3F00",
        "Óxido": "#B7410E",
        "Burdeos": "#800000",
        "Rosado": "#FF69B4",
        "Lavanda": "#E6E6FA",
        "Gris pizarra": "#708090",
        "Azul acero": "#A3C1DA",
        "Azul real": "#4682B4",
        "Aguamarina": "#7FFFD4",
        "Verde lima": "#32CD32",
        "Verde menta": "#98FB98",
        "Verde musgo": "#8FBC8F",
        "Verde pistacho": "#D0F0C0",
        "Amarillo limón": "#FFFACD",
        "Amarillo dorado": "#FFD700",
        "Naranja claro": "#FFA07A",
        "Tomate": "#FF6347",
        "Naranja coral": "#FF4500",
        "Mandarina": "#FF8C00",
        "Rojo granate": "#B22222",
        "Cobre": "#B87333",
        "Vino": "#800000",
        "Rojo granate oscuro": "#A00000",
        "Fucsia": "#FF00FF",
        "Violeta": "#8A2BE2",
        "Morado": "#800080",
        "Lila": "#DDA0DD"
      }).map(([colorName, colorCode])  => (
        <button
          type="button"
          class="btn-color w-10 h-10 rounded-full border cursor-pointer border-gray-300 hover:border-gray-500 transition-all"
          style={`background-color: ${colorCode};`}
          onclick="this.classList.toggle('active')"
          class:list={product.colors.split(",").includes(colorName) ? "active" : ""}
          aria-label={colorName}
          title={colorName}
        >
          <span class="sr-only">{colorName}</span> {/* <!-- Ocultamos el texto usando sr-only --> */}
        </button>
      ))
    }
  </div>
</div>
    </div>

    <!-- Imagenes -->
    <div>
      <!-- File upload -->
      <div class="mt-4 text-white">
        <!-- Guardar  -->
        <div class="flex justify-end">
          <button class="bg-blue-500 mb-5 p-2 rounded text-white"
            >Guardar producto</button
          >
        </div>
        <!-- Botón para eliminar el producto -->
        <!-- Botón para eliminar el producto -->
        <div class="flex justify-end">
          <button
            type="button"
            class="btn-delete-product bg-red-500 mb-5 p-2 rounded text-white"
            data-id={product.id}
          >
            Eliminar producto
          </button>
        </div>

        <!-- File input -->
        <div class="flex items-center justify-center w-full">
          <label
            for="file-upload"
            class="flex flex-col items-center justify-center w-full h-52 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:bg-gray-600"
            id="drop-zone"
          >
            <div class="flex flex-col items-center justify-center pt-5 pb-6">
              <svg
                class="w-8 h-8 mb-4 text-gray-500"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M7 16V4a2 2 0 012-2h6a2 2 0 012 2v12m-6 4l-4-4m0 0l4-4m-4 4h12"
                ></path>
              </svg>
              <p class="mb-2 text-sm text-gray-500" id="lbl-selected-files">
                <span class="font-semibold">Click aquí </span> o arrastra los archivos
              </p>
              <p class="text-xs text-gray-500">
                SVG, PNG, JPG or GIF (max. 800x640px)
              </p>
            </div>

            <!-- class="hidden" -->
            <!-- accept only images -->
            <input
              id="file-upload"
              name="imageFiles"
              type="file"
              accept="image/*"
              multiple
            />
          </label>
        </div>

        <!-- Slideshow -->
        <ProductSlideshow images={images.map((i) => i.image)} />

        <table class="w-full border">
          <thead>
            <tr class="text-[#231f20]">
              <th>Imagen</th>
              <th>Eliminar</th>
            </tr>
          </thead>
          <tbody>
            {
              images.map(({ image, id }) => (
                <tr class="border" id={id}>
                  <td class="flex justify-center">
                    <ProductImage
                      src={image}
                      alt={product.title}
                      className="w-16 h-16 rounded"
                    />
                  </td>
                  <td class="text-center">
                    <button
                      type="button"
                      data-id={id}
                      class="btn-delete-image text-[#231f20]"
                    >
                      X
                    </button>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
  </form>
</main>
  <style>
/* Estilo general para botones de talla y eliminar imagen */
.btn-size,
.btn-delete-image {
  @apply text-base py-2 px-4 rounded-lg border border-gray-300 text-[#6d686e] transition-all duration-200 ease-in-out;
}

/* Estado hover para mejorar la elegancia */
.btn-size:hover {
  @apply bg-[#231f20] text-white border-[#231f20];
}

/* Estado activo (botón seleccionado) */
.active {
  @apply bg-[#231f20] text-white border-[#231f20];
}

/* Opción para un borde y cambio de color al seleccionar */
.btn-size:focus,
.btn-size.active {
  @apply ring-2 ring-[#231f20] outline-none;
}

/* Ajuste de animaciones para transiciones suaves */
.btn-size {
  transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
}
    .btn-color,
    .btn-delete-image {
      @apply rounded border cursor-pointer border-gray-300 w-10 h-10 mr-4 hover:bg-blue-300 hover:text-white transition-all;
    }

    .btn-category,
    .btn-delete-image {
      @apply rounded border cursor-pointer border-gray-300 w-auto h-10 mr-4 hover:bg-blue-300 hover:text-white transition-all;
    }

    .active {
      @apply bg-[#d5d6c3] text-[#231f20] text-lg;
    }
    .btn-color.active {
    @apply ring-2 ring-offset-2 ring-blue-500;
  }
  </style>
</MainLayout>

<script>
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";

  document.addEventListener("astro:page-load", () => {
    const form = document.querySelector("form") as HTMLFormElement;
    const sizeButtons = document.querySelectorAll(".btn-size");
    const colorButtons = document.querySelectorAll(".btn-color");
    const categoryButtons = document.querySelectorAll(".btn-category");
    const btnsDeleteImage = document.querySelectorAll(".btn-delete-image");
    const btnsDeleteProduct = document.querySelectorAll(".btn-delete-product");

    btnsDeleteProduct.forEach((btn) => {
      btn.addEventListener("click", async () => {
        const id = btn.getAttribute("data-id");
        if (!id) {
          console.error("No ID found");
          return;
        }

        try {
          const { error } = await actions.deleteProduct.safe({ id });

          if (error) {
            console.log(error);
            alert("Error al eliminar el producto: " + error.message);
            return;
          }

          btn.closest("tr")?.remove();

          window.location.href = "/admin/dashboard";
        } catch (error) {
          alert("Error al eliminar el producto: " + error);
        }
      });
    });

    const lblSelectedFiles = document.querySelector(
      "#lbl-selected-files",
    ) as HTMLParagraphElement;
    const dropZone = document.querySelector("#drop-zone") as HTMLLabelElement;
    const fileInput = document.querySelector(
      "#file-upload",
    ) as HTMLInputElement;

    if (!form) {
      return;
    }

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const selectedCategorys = Array.from(categoryButtons)
        .filter((btn) => btn.classList.contains("active"))
        .map((btn) => btn.textContent?.trim())
        .join(",");

      // Obtén las tallas seleccionadas
      const selectedSizes = Array.from(sizeButtons)
        .filter((btn) => btn.classList.contains("active"))
        .map((btn) => btn.textContent?.trim())
        .join(",");

      // Obtén los colores seleccionados
      const selectedColors = Array.from(colorButtons)
        .filter((btn) => btn.classList.contains("active"))
        .map((btn) => btn.textContent?.trim())
        .join(",");

      // Añadir tallas y colores a FormData
      const formData = new FormData(form);
      formData.set("sizes", selectedSizes);
      formData.set("colors", selectedColors);
      formData.set("categorys", selectedCategorys);

      const formValues = Object.fromEntries(formData.entries());
      console.log(formValues);

      const { data, error } = await actions.createUpdateProduct.safe(formData);

      if (error) {
        return alert(error.message);
      }

      navigate(`/admin/products/${data.slug}`);
    });

    // Eliminar imagenes

    btnsDeleteImage.forEach((btn) => {
      btn.addEventListener("click", async (e) => {
        const id = btn.getAttribute("data-id");
        if (!id) return;

        const { error } = await actions.deleteProductImage.safe(id);
        if (error) {
          console.log(error);
          alert(error);
          return;
        }

        const trId = `#${id}`;
        document.querySelector(trId)?.remove();
      });
    });

    // Drag & Drop

    const preventDefaults = (e: DragEvent) => {
      e.preventDefault();
      e.stopPropagation();
    };

    const highlight = (e: DragEvent) => {
      dropZone.classList.add("border-blue-500", "bg-blue-50");
    };

    const unHighlight = (e: DragEvent) => {
      dropZone.classList.remove("border-blue-500", "bg-blue-50");
    };

    const createFileList = (files: File[]): FileList => {
      const dataTrasfer = new DataTransfer();
      files.forEach((file) => dataTrasfer.items.add(file));
      return dataTrasfer.files;
    };

    const handleFiles = (files: FileList) => {
      const validFiles = Array.from(files).filter((file) =>
        file.type.startsWith("image/"),
      );

      if (fileInput && validFiles.length > 0) {
        fileInput.files = createFileList(validFiles);
      }

      lblSelectedFiles.innerHTML = `<strong>${validFiles.length} archivos seleccionados</strong>`;
    };

    (["dragenter", "dragover", "dragleave", "drop"] as const).forEach(
      (eventName) => {
        dropZone.addEventListener(eventName, preventDefaults);
        document.body.addEventListener(eventName, preventDefaults);
      },
    );

    (["dragenter", "dragover"] as const).forEach((eventName) => {
      dropZone.addEventListener(eventName, highlight);
    });

    (["dragleave", "drop"] as const).forEach((eventName) => {
      dropZone.addEventListener(eventName, unHighlight);
    });

    // Sólo imágenes
    dropZone.addEventListener("drop", (e) => {
      const files = e.dataTransfer?.files;

      if (files) {
        handleFiles(files);
      }
    });

    // fin del astro:load
  });
</script>
